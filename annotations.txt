django-admin e manage.py são basicamente a mesma coisa, com a diferença de que o manage.py já carrega o arquivo contendo as configurações do django.

Na prática, só se usa django-admin pra dar um startproject, depois todos os outros comandos se usa o manage.py

o protocolo http funciona com o cliente fazendo uma request e o servidor retornando uma response
HTTP REQUEST <- HTTP RESPONSE

no arquivo urls.py defino as rotas do django. essas rotas obtém a request do cliente, passa esse request para uma função chamada view e tratam esse http request, retornando um http response

a função path do django precisa de dois argumentos, uma string para a rota e uma função para a view. A função de view precisa cumprir alguns requisitos, receber como parametro o um http request e retornar um http response

depois de criar o projeto, se cria o app django: "O Django permite que nosso site seja dividido em apps. Com isso, eu poderia criar um app para cada parte específica dele.    Exemplos: home, sobre, contato, e assim por diante. Geralmente, apps precisam conter tudo o que for relacionado, visto que você pode mover esses apps para outros projetos para reutilizar o código. Então, se algo for interligado com outra parte do sistema, convém manter essas partes dentro do mesmo app, caso contrário, seu app não funcionaria corretamente em outro projeto."

projetos > urls django tem uma função chamada include para incluir as urls de outro arquivo. tem como parâmetro o nome do app e o nome do arquivo com as urls.

# HTTP REQUEST <- HTTP RESPONSE
# HTTP REQUEST
def home(request):
    return HttpResponse("HOME")
    # return HTTP Response

def home(request):
    return render(request, 'home.html')
a função render recebe um request e o caminho de um template para renderizar, ela irá buscar dentro da pasta templates. Também é preciso incluir o nome do app no settings.py, para que o django saiba onde estará a pasta templates.
posso passar variáveis para o render renderizar no template atraves do parametro context.
Também se pode fazer diversas coisas nos templates, como IF e FOR

base_static e base_templates são arquivos globais, não estão atrelados a nenhum app. É sempre bom usar o namespacing para não gerar conflito quando executar o comando collectstatic

quanto aos {% block %}, sempre que uso essa "tag" estou definindo um block, mas se eu estiver estendendo uma página e defino um bloco com o mesmo nome de um bloco definido na página pai, quer dizer que estou usando esse bloco da página pai para inserir conteúdo nele. Ou seja, nas páginas filho se eu digitar um {% block %} que não esteja na página pai, seja por erro de digitação ou outro motivo, eu estou definindo um bloco novo.

Model é uma classe que representa minha tabela no banco de dados, os atributos dessa classe são as colunas.
migrate é o ato de atualizar a base de dados para sincronizar o meu código com a base de dados. Antes de executar o comando migrate preciso criar os arquivos de migration através do comando makemigrations.

QuerySet é um iterável, é uma lista de objetos dos meus Database/Modelos Django.
O .objects é o manager do django. No Django, usamos o "manager" do model para executar queries na base de dados.

Podemos filtrar dados usando uma Foreign Key (chave estrangeira) de determinado model. Para isso, usamos o nome do campo que representa a foreign key, dois underlines e o nome do campo no model estrangeiro (de onde vem a foreign key).
recipes = Recipe.objects.filter(category__name="Almoço") retornará todas as receitas cuja categoria tem o nome "almoço". Aula 58
category__name acessa a tabela categoria diretamente pela foreign key do recipe 'category' e tá pedindo pra filtrar os objetos pela nome da categoria.

O blank=True é referente ao formulário, ou seja, não valida o formulário se o campo estiver em branco.

A utilização do "app_name" em urls.py é útil quando você tem múltiplas aplicações Django em seu projeto. Ele define um namespace para as URLs da aplicação, evitando conflitos de nomes com outras aplicações.
Quando você define um "app_name" em urls.py, você precisa usar essa sintaxe no template HTML para referenciar corretamente a URL da aplicação. O formato é '{namespace:nome_url}', onde 'namespace' é o valor definido em "app_name" e 'nome_url' é o nome atribuído à URL específica.

Sobre o pytest
DJANGO_SETTINGS_MODULE = project.settings # telling to pytest where is my django settings
python_files = test.py tests.py test_*.py tests_*.py *_test.py *_tests.py # telling to pytest where to find tests by method name
addopts = # this allow to pass settings to pytest

O nome do método de teste tem que ser super descritivo, mesmo que seja grande, para que, quando houver erro, eu saiba exatamente onde está o erro, o que errou e porque que errou.

Fixture é criar dados para o teste, porque, para cada teste, uma nova base de dados é criada, essa base de dados vem vazia. Então se cria fixture para inserir dados nessa base de dados de teste, no fim do teste a base é destruída. Mas em um termo mais geral, fixture é qualquer trecho de código que serve para dar suporte aos testes, como o carregamento de um arquivo, injetar dados na base de dados, e etc.


test_recipe_home_url_is_correct(self): Testa se a URL está correta.
def test_recipe_home_view_is_correct(self): Testa se a URL chama a view correta.
test_recipe_home_view_loads_correct_template(self): Testa se a view está renderizando o template correto.


sobre o test_recipe_home_template_loads_recipes primeiramente criamos os dados, executei um get na url, essa url retornou uma response, essa response tem um conteudo que foi convertido para string, depois checo se nesse conteudo está o meu 'Recipe Title'.

Todos esses testes são unitários, testes de desenvolvedor, de dentro para fora. Também precisamos fazer os testes funcionais, que são os testes de usuário, de fora para dentro, simulando a interação de um usuário com nosso sistema. É importante fazer os dois tipos de testes para fechar todas as lacunas.

Não preciso testar coisas do django, da funcionalidade dele, porque os devs do django já fizeram isso. Preciso testar coisas que envolvem a lógica da minha aplicação. Devo testar coisas que mudam minha aplicação, como o tamanho de string que um campo suporta, se for maior, tem que mostrar um erro pro usuario, ou como o is_published = models.BooleanField(default=False) que muda drasticamente a aplicação.

self.recipe.full_clean() nós somos os responsaveis de fazer com que o django execute as validações, o django não executa automaticamente quando se chama o método .save(), para muitos desenvolvedores isso é uma falha. No método full_clean() é onde todas as validações são executadas.

with self.assertRaises(ValidationError):
    self.recipe.full_clean()
Dentro do contexto (context manager) do assertRaises com with, eu escrevo o código que espero que levante o erro que está sendo passado como parâmetro.

from recipes.models import Recipe

for i in range(5):
    for j in range(10):
        r = Recipe.objects.get(id=i); r.id = None; r.title = f'{r.title} {j}'; r.save()
duplicar as receitas mudando apenas os titulos

from django.utils.text import slugify
for recipe in recipes: recipe.slug = slugify(recipe.title); recipe.save();
slugifying os titulos