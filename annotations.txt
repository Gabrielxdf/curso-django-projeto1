django-admin e manage.py são basicamente a mesma coisa, com a diferença de que o manage.py já carrega o arquivo contendo as configurações do django.

Na prática, só se usa django-admin pra dar um startproject, depois todos os outros comandos se usa o manage.py

o protocolo http funciona com o cliente fazendo uma request e o servidor retornando uma response
HTTP REQUEST <- HTTP RESPONSE

no arquivo urls.py defino as rotas do django. essas rotas obtém a request do cliente, passa esse request para uma função chamada view e tratam esse http request, retornando um http response

a função path do django precisa de dois argumentos, uma string para a rota e uma função para a view. A função de view precisa cumprir alguns requisitos, receber como parametro o um http request e retornar um http response

depois de criar o projeto, se cria o app django: "O Django permite que nosso site seja dividido em apps. Com isso, eu poderia criar um app para cada parte específica dele.    Exemplos: home, sobre, contato, e assim por diante. Geralmente, apps precisam conter tudo o que for relacionado, visto que você pode mover esses apps para outros projetos para reutilizar o código. Então, se algo for interligado com outra parte do sistema, convém manter essas partes dentro do mesmo app, caso contrário, seu app não funcionaria corretamente em outro projeto."

projetos > urls django tem uma função chamada include para incluir as urls de outro arquivo. tem como parâmetro o nome do app e o nome do arquivo com as urls.

# HTTP REQUEST <- HTTP RESPONSE
# HTTP REQUEST
def home(request):
    return HttpResponse("HOME")
    # return HTTP Response

def home(request):
    return render(request, 'home.html')
a função render recebe um request e o caminho de um template para renderizar, ela irá buscar dentro da pasta templates. Também é preciso incluir o nome do app no settings.py, para que o django saiba onde estará a pasta templates.
posso passar variáveis para o render renderizar no template atraves do parametro context.
Também se pode fazer diversas coisas nos templates, como IF e FOR

base_static e base_templates são arquivos globais, não estão atrelados a nenhum app. É sempre bom usar o namespacing para não gerar conflito quando executar o comando collectstatic

quanto aos {% block %}, sempre que uso essa "tag" estou definindo um block, mas se eu estiver estendendo uma página e defino um bloco com o mesmo nome de um bloco definido na página pai, quer dizer que estou usando esse bloco da página pai para inserir conteúdo nele. Ou seja, nas páginas filho se eu digitar um {% block %} que não esteja na página pai, seja por erro de digitação ou outro motivo, eu estou definindo um bloco novo.

Model é uma classe que representa minha tabela no banco de dados, os atributos dessa classe são as colunas.
migrate é o ato de atualizar a base de dados para sincronizar o meu código com a base de dados. Antes de executar o comando migrate preciso criar os arquivos de migration através do comando makemigrations.

QuerySet é um iterável, é uma lista de objetos dos meus Database/Modelos Django.
O .objects é o manager do django. No Django, usamos o "manager" do model para executar queries na base de dados.

Podemos filtrar dados usando uma Foreign Key (chave estrangeira) de determinado model. Para isso, usamos o nome do campo que representa a foreign key, dois underlines e o nome do campo no model estrangeiro (de onde vem a foreign key).
recipes = Recipe.objects.filter(category__name="Almoço") retornará todas as receitas cuja categoria tem o nome "almoço". Aula 58
category__name acessa a tabela categoria diretamente pela foreign key do recipe 'category' e tá pedindo pra filtrar os objetos pela nome da categoria.

O blank=True é referente ao formulário, ou seja, não valida o formulário se o campo estiver em branco.

A utilização do "app_name" em urls.py é útil quando você tem múltiplas aplicações Django em seu projeto. Ele define um namespace para as URLs da aplicação, evitando conflitos de nomes com outras aplicações.
Quando você define um "app_name" em urls.py, você precisa usar essa sintaxe no template HTML para referenciar corretamente a URL da aplicação. O formato é '{namespace:nome_url}', onde 'namespace' é o valor definido em "app_name" e 'nome_url' é o nome atribuído à URL específica.

Sobre o pytest
DJANGO_SETTINGS_MODULE = project.settings # telling to pytest where is my django settings
python_files = test.py tests.py test_*.py tests_*.py *_test.py *_tests.py # telling to pytest where to find tests by method name
addopts = # this allow to pass settings to pytest

O nome do método de teste tem que ser super descritivo, mesmo que seja grande, para que, quando houver erro, eu saiba exatamente onde está o erro, o que errou e porque que errou.

Fixture é criar dados para o teste, porque, para cada teste, uma nova base de dados é criada, essa base de dados vem vazia. Então se cria fixture para inserir dados nessa base de dados de teste, no fim do teste a base é destruída. Mas em um termo mais geral, fixture é qualquer trecho de código que serve para dar suporte aos testes, como o carregamento de um arquivo, injetar dados na base de dados, e etc.


test_recipe_home_url_is_correct(self): Testa se a URL está correta.
def test_recipe_home_view_is_correct(self): Testa se a URL chama a view correta.
test_recipe_home_view_loads_correct_template(self): Testa se a view está renderizando o template correto.


sobre o test_recipe_home_template_loads_recipes primeiramente criamos os dados, executei um get na url, essa url retornou uma response, essa response tem um conteudo que foi convertido para string, depois checo se nesse conteudo está o meu 'Recipe Title'.

Todos esses testes são unitários, testes de desenvolvedor, de dentro para fora. Também precisamos fazer os testes funcionais, que são os testes de usuário, de fora para dentro, simulando a interação de um usuário com nosso sistema. É importante fazer os dois tipos de testes para fechar todas as lacunas.

Não preciso testar coisas do django, da funcionalidade dele, porque os devs do django já fizeram isso. Preciso testar coisas que envolvem a lógica da minha aplicação. Devo testar coisas que mudam minha aplicação, como o tamanho de string que um campo suporta, se for maior, tem que mostrar um erro pro usuario, ou como o is_published = models.BooleanField(default=False) que muda drasticamente a aplicação.

self.recipe.full_clean() nós somos os responsaveis de fazer com que o django execute as validações, o django não executa automaticamente quando se chama o método .save(), para muitos desenvolvedores isso é uma falha. No método full_clean() é onde todas as validações são executadas.

with self.assertRaises(ValidationError):
    self.recipe.full_clean()
Dentro do contexto (context manager) do assertRaises com with, eu escrevo o código que espero que levante o erro que está sendo passado como parâmetro.

from recipes.models import Recipe
from django.utils.text import slugify

for i in range(5):
    for j in range(10, 101):
        r = Recipe.objects.get(id=i+1); r.id = None; r.title = f'{r.title} {j}'; r.slug = slugify(f'{r.title} {j}'); r.save()
duplicar as receitas mudando apenas os titulos e os slugs

from django.utils.text import slugify
for recipe in recipes: recipe.slug = slugify(recipe.title); recipe.save();
slugifying os titulos

No TDD tenho que pensar no que quero que aconteça, escrevo um teste pra isso acontecer, e depois escreve o código, e depois, se precisar, refatora o código até o teste passar.

Ciclo do TDD > RED - GREEN - REFACTOR
RED - Escrever um teste que falhe.
GREEN - Fazer o teste passar com o menor esforço possível (baby steps), no caso da url search, seria apenas criar a nova url, sem criar as views ainda. Criar a view será outro teste, resolvendo também, com o menor esforço possível. Esse teste de URL não precisou de REFACTOR, mas se olhar por outro lado, o teste de criar e corrigir a view pode ter sido um REFACTOR desse teste da URL.
REFACTOR - Refatorar o código eliminando novos erros que possam surgir. O TDD guia a gente a cada erro que surge quando vamos corrigindo de um por um com o menor esforço possível. REFACTOR também existe para corrigirmos o código caso tenhamos feito algo apenas para os testes passarem rapidamente. Algumas vezes isso pode envolver criar outros testes.

Então o TDD busca ir do RED para o GREEN o mais rápido possível e se for necessário, REFACTOR.


Diferente do MVC, o Django usa o padrão MTV (Model, Template, View).
    O Model é responsável por fazer o mapeamento entre o meu código e a base de dados. O model representa dados. O model também pode ter lógica dentro de métodos dentro dos models.

    A view é uma função ou classe (no caso de Class Based Views), que cria uma lógica para descobrir quais dados (pode ser do model) ela vai utilizar, e escolhe o que vai renderizar, ou seja, qual template vai utilizar. A view no django seria quase o controller do MVC. Em resumo, a função da view é fazer a lógica pra saber o que vai ser mostrado para o usuário. A view é o intermediário entre o model e o template, afinal ela pode escolher qual model utilizar e qual template utilizar para mostrar na tela.

    O template é a parte que o usuário vê e interage, ou seja, é o HTML. Embora o template possa ter lógica. não é recomendável, quanto menos lógica no template melhor é e mais fácil de testar é.

    title__icontains=search_term icontains é simplesmente o contains mas case insensitive, não diferencia letras maiusculas e minusculas.


test_recipe_search_can_find_recipe_by_title:
    self.assertIn(recipe1, response1.context['recipes'])

    só estou testando se a recipe foi enviada ao contexto, não estou testando o template (se a recipe foi de fato renderizada no template, nesse caso eu veria se o título da recipe 1 está no content da response, por exemplo)

sobre o teste test_make_pagination_range_returns_a_pagination_range: eu tenho 20 páginas e a partir da página atual que o usuário está, a função tem que retornar as 4 páginas [1,2,3,4]

 as views, eu passei o paginator como contexto para o home.html, mas estou usando ele no pagination.html. Pagination tem acesso a esses objetos que foram passados no contexto, porque home estende de base.html que por sua vez inclui pagination.html, logo, no final, tudo fica uma página só, por isso o págination.html possui acesso ao contexto passado para home.html.

 recipes = Recipe.objects.filter ...
paginator = Paginator(recipes, 9)
# same thing as recipes above, but with pagination information
page_obj = paginator.get_page(current_page)

Python-dotenv ajuda a configurar as variáveis de ambiente.
É necessário fazer a configuração das variáveis de ambiente em pelo menos 3 locais: manage.py, asgi.py e wsgi.py. Se esquecer de um local pode gerar um grande problema dificil de ser encontrado no futuro.

Toda vez que houver um arquivo .env-example, eu tenho que renomear esse arquivo para .env e alterar o conteúdo dele. Nesse arquivo fica guardado as variáveis de ambiente que devem estar relacionadas APENAS ao ambiente local e NUNCA deve ser compartilhado. Então o arquivo .env-example serve como um guia para cada desenvolvedor que pegar o projeto conseguir criar e configurar suas próprias variáveis de ambiente. Por isso no .env-example deve-se colocar valores fictícios para as variáveis de ambiente, de modo que guie o desenvolvedor a criar suas próprias variáveis.

FORMS
Posso criar formulário usando from django.forms import Forms que é um formulário que não está ligado a dados nenhum.
Ou usar django.forms import ModelForms que está atrelado a um Model específico, de modo que busca os dados e os salva nesse Model automaticamente.

class RegisterForm(forms.ModelForm):
    class Meta:
        model: User
        fields = '__all__' (todos os campos)
        fields = 
a classe meta serve para passar meta dados para o django, como por exemplo, qual Model que o form vai estar atrelado, quais campos desse model o django vai atrelar ao form.
Só desse fazer esse pequeno trecho de código acima, o django já cria tudo, o form, faz todas as validações, CRUD, automaticamente.

Após isso, passo o form para a view, e a view passa para o template. Do template posso renderizar o form facilmente com {{form}}

def register_view(request):
    form = RegisterForm()
    return render(request, 'authors/pages/register_view.html', context={
        'form': form
    })

request.session['number'] = request.session.get('number') or 1
request.session['number'] += 1
se existir esse número de vezes que o usuário acessou essa view (fez essa request), eu pego o valor atual e somo 1, se não existir defino o valor como 1.

O django cria um cookie no navegador salvando no navegador, informando ao servidor django que esse 'number' está atrelado ao meu navegador. Essas são as sessões do navegador. Isso é a mesma coisa que o django utiliza para saber se um usuario está logado ou não, por exemplo.

Iremos utilizar a session para trafegar dados de uma view (página) para outra.

Salvando os dados do form na sessão request.session['register_form_data'] = request.POST
request.POST é um dict com os valores passados para o POST

def register_create() não renderiza nada, apenas trata os dados do POST, podendo fazer validação, processamentos e CRUD, após isso, ela envia os dados processados (redirect) para a register_view() que irá renderizar algo dizendo se o usuário foi criado com sucesso ou não.

Ou seja, pego o POST com uma view diferente para evitar o problema de toda vez que atualizar a página fazer um POST de novo, depois faço o redirect para outra view, que será um GET, assim esse problema é evitado. Então toda vez que atualizo a página, estou fazendo apenas um GET, não um POST, pois não estou clicando no botão send, que levará ao def register_create(), não à propria view da página que estou, evitando assim multiplos POSTS. Uma view é responsável por tratar os dados do form e outra view por exibí-los.

def clean_password(): valida especificamente o campo password
data = self.data pega os dados brutos do formulário, sem nenhum tratamento
data = self.cleaned_data os dados já tratados pelo django. Retorna um dicionario cuja chave são os nomes dos campos.

Enquanto o método def clean_field(): valida um campo específico, o método def clean(): é um método mais genérico que valida o formulário como um todo e não, campo por campo, como por exemplo validando dependencias de campo (se password2 é igual a password, repetindo a senha).
Esse método é chamado depois dos métodos clean_field().

os validators serve para passar uma função que execute uma validação específica, para que o django execute com o valor desse campo quando o usuário enviar o formulário.

dentro do unittest, tem os integration tests. No teste unitário, você testa exclusivamente a coisa que se quer testar. No teste de integração, você tem que fazer tudo se integrar (view, template, form, tudo tem que se integrar e dar o resultado esperado). Em outras palavras, teste unitário testa uma coisa exclusiva, e o teste de integração testa uma coisa em conjunto com outras coisas.

DICA PARA SABER OQUE TESTAR: Tudo o que eu ponho a mão no código tenho que testar, como por exemplo add_placeholder(self.fields['username'], 'Your username'), aqui adicionei um placeholder manualmente, portanto, tenho que testar. Se eu usar as configurações padrão do campo, não preciso testar, pq isso já foi testado pelo django.
Outro exemplo de código para testar: validações criadas pelo dev.

Os testes serão onde irei me apoiar quando eu precisar adicionar novos recursos ou refatorar o código.
Ver saber mais sobre SimpleTestCase, TransactionTestCase e TestCase, ver o site > https://docs.djangoproject.com/en/3.2/topics/testing/tools/#provided-test-case-classes


class AuthorRegisterFormIntegrationTest()
Neste teste de integração, não estarei testando o apenas o form, mas a url, a view, o template e o form tudo junto. Testa-se todas as engrenagens necessária para que determinada ação funcione.

response = self.client.post(url, data=self.form_data, follow=True)
follow=True para que a response siga o redirecionamento que a view register_create faz, para que tenhamos content e context que a register_view gera.

Assim, temos os testes unitários e os testes de integração, são testes de dentro pra fora. Ainda existe os testes funcionais, que são testes de fora pra dentro, simulando a ação de um usuário no próprio navegador.

def strong_password(password): tem que retornar de alguma forma o valor, se não, se houver um ValidationError o valor retornado será None. Se a senha não estiver válida mas ainda forem iguais nos dois campos, isso causa um erro que não existe "password não é igual a password2" pois password chegou ao ValidationError, mas não teve seu valor retornado, ficando como None. Só que não tem como retornar o valor do password pois assim que se atinge o ValidationError já se atua como um retorno, assim nunca retornando a password original e ficando como None. Primeiro problema do Django que encontro.

Uma tática para enganar o django e dizer que a pasta forms é o mesmo módulo padrão forms.py. É uma técnica que é possível fazer no Python em geral, não apenas em Django, não se deve fazer isso em todas as ocasiões possíveis, embora seja uma prática que não gera nenhum transtorno.
A ideia é fazer com que a pasta forms se comporte da mesma maneira que o módulo forms.py. Geralmente quando se faz essa técnica é pra não quebrar nada que já se fez na aplicação.
Fazemos isso no arquivo __init__.py que carrega inicialmente tudo que você precisa quando importar o package forms.
Nesse arquivo temos from .register_form import RegisterForm. Quando importamos esse package, o arquivo init será inicializado e tudo oque constar no init já vai constar no package. Assim sendo, o Django, pytest e outras aplicações agora pensará que a classe RegisterForm está dentro do package forms, tratando ele como um módulo comum que tem uma classe dentro. Assim o Django entende que o package forms é o módulo padrão forms.py
O arquivo __init__.py é executado quando se importa o módulo.

Quando um form não está atrelado a um Model não precisamos salvar ele na base de dados, como é o caso do LoginForm. Mas podemos fazer todo o resto, como validar os campos com clean_field() e clean(), depois checar se o formulário é valido com form.is_valid(), depois pegar os valores limpos de dentro desse formulário com super().clean() e fazer o que se deseja. form.is_valid() só é executado quando se tem um POST.

'form_action': reverse('authors:login_create') se usa o reverse() para pegar dinamicamente o caminho correto da url pelo seu nome. Se a o caminho completo da URL mudar, não será um problema, e não precisarei refatorar o código.

formulário válido não significa dados válidos. No LoginForm, após o form ser válido, é preciso verificar se o usuário também o é (autenticação).
A função login no django faz automaticamente a criação da sessão, dos cookies e etc.

@login_required(login_url='authors:login', redirect_field_name='next')
Quando o usuário tentar acessar alguma página restrita a apenas quem está logado, e ele não está, será redirecionado para a login_url, depois de fazer o login, o django te leva para o redirect_field_name, neste caso com o 'next', a ideia é que apenas leva o usuário de volta para onde ele estava tentando acessar sem estar logado. O redirect_field_name virá como um campo na querystring da URL e na minha aplicação posso fazer o redirect obtendo esse campo.

{% csrf_token %} faz com que meu sistema só aceite requisições vindas pelo próprio sistema, não de fora. Para que alguém não envie algum link com /authors/logout/ para meu usuário e ao clicar ser deslogado, por exemplo.

Na login_view:
if not request.POST:
Tem que ser um form com POST para podermos usar o csrf_token

if request.POST.get('username') != request.user.username:
pega o username do <input type="hidden" name="username" value="{{ request.user.username }}" /> que está no form. Isso serve para garantir que o POST tenha o usuário com o mesmo nome de usuário que está logado.

#To do o restante do CRUD para o User

É assim que funciona a configuração do selenium > criar opções do webdriver, depois criar um service do webdriver e depois criar o webdriver do chrome.
opções do webdriver > chrome_options > passa opções para o chrome quando for iniciar.
service do webdriver > chrome_service > passa onde está o chromedriver
webdriver do chrome > browser

chrome_options.add_experimental_option("detach", True)
o navegador está fechando automaticamente, então esta linha de código "desconecta" o navegador Chrome, que o mantém independente do programa python.

a option '--headless' faz com que o navegador não seja aberto para o dev ver, o selenium faz tudo por baixo dos panos.

Testes funcionais, embora testem somente uma coisa assim como os testes unitários e testes de integração, contam uma história completa, por exemplo: "usuário abriu navegador, usuário abriu a página home, usuário buscou por receitas ... usuário concluiu a operação.". Ao contrário do teste unitário, que é, por exemplo: "a label do campo x é y?". Teste funcional é muito mais amplo.

Testes funcionais precisam do from django.test import LiveServerTestCase, pois é necessário subir um servidor para fazer os testes. Após os testes o servidor é desmontado automaticamente. Também é preciso criar as fixtures, como nos testes unitários.

LiveServerTestCase não sobe os arquivos estáticos para o servidor propositalmente, porque geralmente se testa a lógica, não os arquivos estáticos.
Já o from django.contrib.staticfiles.testing import StaticLiveServerTestCase sobe os arquivos estáticos para o servidor.

As marcações são apenas do pytest, e não do unittest. Essas marcações apenas o test runner do pytest irá entender. Neste projeto, estou escrevendo testes em unittest, mas usando o test runner do pytest para executá-los.
Geralmente testes unitários são rápidos, e funcionais lentos.

No pytest.ini estou usando o strict-markers, então preciso declarar esses markers neste arquivo, se não estivesse usando o strict-markers, não precisaria fazer isso.
@pytest.mark.functional_test <- exemplo de marker que se coloca em cima do método ou da classe.
pytest -m 'functional_test' <- exemplo de código pytest que executará apenas os testes com esse marker.
pytest -m 'not functional_test' <- exemplo de código pytest que executará todos os testes menos os que tem esse marker.
pytest -k 'test_recipe_home_page_without_recipes_error_not_found_message' <- executa apenas esse teste pelo seu nome.

Mixin é um padrão de projeto em que classes mixins são sacos de métodos, as outras classes não tem relação nenhuma com essa classe em termos de herança, apenas utiliza seus métodos. Ou seja, as outras classes apenas herda os métodos da classe mixin, sem relações de herança e lógica.

class RecipeTestBase(TestCase, RecipeMixin): Como o python permite herança múltipla, ao fazer isso, apenas obtenho os métodos da classe mixin, sem sobrescrever nada.

Com o selenium, geralmente se testa o que eu testaria manualmente, como desenvolvedor. Por exemplo, abrir uma página, achar um botão, digital algo num input, criar um usuário, etc. Testando com o selenium temos que esquecer que somos desenvolvedores e testar como um usuário comum da aplicação.

Sempre que criar uma pasta para testes é preciso fazer o __init__.py

first_name_field.send_keys(Keys.ENTER)
    form = self.browser.find_element(
        By.XPATH,
        '/html/body/main/div[2]/form'  # full xpath from browser
    )
Depois de ter pressionado ENTER tenho que selecionar o form novamente, porque o anterior não existe mais, visto que a página foi atualizada quando foi pressionado o ENTER.

def form_field_test_with_callback(self, callback): callback é uma função que você chama depois de determinadas coisas, depois de fazer coisa primeiro.

Ao mexer no código, se eu quebrar um teste propositalmente (mudar algo no código propositalmente que você sabe que vai quebrar o teste), eu refatoro o teste, se não, eu refatoro o código.

Criando a página inicial da dashboard (admin do autor). Se você for disponibilizar uma área onde o usuário possa manipular coisas dentro do sistema, faz essa área do 0. Não use o dashboard padrão do django.

Sempre que tivermos um form com arquivos
  <form
  class="main-form"
  action="{{ form_action }}"
  method="POST"
  enctype="multipart/form-data"
  >
  Deve ter o enctype. Isso informa tanto para o navegador quanto para o servidor que esse form também trafegará arquivos, e não apenas texto.
  O servidor agora precisa saber que também receberá arquivos como dados.

    form = AuthorRecipeForm(
    data=request.POST or None,
    files=request.FILES or None,
    instance=recipe
)

No django isso é feito pela linha files. Portanto, request.POST vem dados de texto e request.FILES vem arquivos binários.


def dashboard_recipe_create(): essa é a view
Então apartemente quando acesso uma determinada URL a view é chamda, mas quando dou submit em um botão a view também é chamada. Só assim é possível salvar o form. Através dessa segunda chamada da view. (Ver o código da view.)


from collections import defaultDict
self._my_errors = defaultdict(list) faz com que eu crie um dicionário e qualquer chave que eu criar nesse dict vai ter como padrão uma lista vazia, inicialmente.
self._my_errors['frutas'].append('banana') -> Crio uma chave que já tem uma lista associada. Isso me permite não ficar fazendo IF se existe a chave. Se não existir é criado, se existir faz o append.

if len(title) < 5:
    self._my_errors['title'].append('Title Must have at least 5 chars.')

Em vez de fazer um raise ValidationError de um por um erro, estamos juntando todos os erros de todos os campos para mostrar de uma vez para o usuário. Um campo pode ter mais de um erro, por isso o uso de uma lista.

if self._my_errors:
    raise ValidationError(self._my_errors)
Por fim, aqui exibe todos os erros em todos os campos de uma vez para o usuário.

Class Based Views (CBV) não é uma alternativa as Function Based Views, não é para substituir.
As CBV tem uma sequência de métodos que são executados em ordem.
Por exemplo, a classe View base tem os seguintes métodos:
1 - setup()
2 - dispatch()
3 - http_method_not_allowed()
4 - options()
executados nessa sequência.

Já a DetailView tem o seguinte Fluxograma de métodos
1 - setup()
2 - dispatch()
3 - http_method_not_allowed()
4 - get_template_names()
5 - get_slug_field()
6 - get_queryset()
7 - get_object()
8 - get_context_object_name()
9 - get_context_data()
10 - get()
11 - render_to_response()

Mixin é um padrão de projeto utilizado para adicionar funcionalidades externas à uma família de heranças. São classes que utilizamos para adicionarmos coisas em outras classes/cadeia de heranças.

POO
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def setup(self, *args, **kwargs):
        return super().setup(*args, **kwargs)

    def dispatch(self, *args, **kwargs):
        return super().dispatch(*args, **kwargs)
Estou sobreescrevendo esses métodos. Sempre preciso retornar o super deles. Com exceção do __init__ que não é necessário, apenas chama o super.

get_queryset() manipula a QuerySet
get_context_data() manipula o contexto

ssh cursodjango 'cd ~/app_repo ; git pull origin main ; sudo systemctl restart curso_django'
comando para fazer alterações locais e atualizar no servidor de maneira fácil. Esse comando entra no servidor, faz o git pull e restarta o socket do gunicorn.

django debug toolbar me dá informações de debug afim de que eu melhore a performance do sistema.

O problema N+1 que estavamos tendo nas consultas é que pra cada busca de uma receita, o sistema faz outra busca para categoria e outra busca para o autor, quando poderia fazer tudo numa busca só.
O Django fornece duas soluções:
select_related() -> faz um "follow" das relações de chave estrangeiras. Ou seja, ele verifica as relações que precisam ser buscadas na base de dados e busca todas de uma vez, fazendo uma consulta mais complexa, mas fazendo apenas uma vez. Em SQL ele está fazendo um Join.
select_related() -> É mais comum em relações many-to-many

As querysets do django são lazy, elas não são executadas até quando eu realmente precisar do valor. Mesmo que eu escreva o código da consulta, mas não use o resultado, o django não executa essa consulta. Por exemplo
    recipes = Recipe.objects.all()
Estou chamando o método all do object manager do meu model Recipe. Isso retornará todos as instâncias de recipes.
Porém o django não executa de fato essa query até eu precisar desse valor, como na linha a seguir:
    print(recipes[0].title)
Além disso, eu pedi todos os objetos Recipe, mas o django só retorna o objeto que eu usei o resultado de fato, nesse caso o recipes[0].

Os métodos filter, orderby e etc são métodos que manipulam querysets, então só podem ser executados sobre uma queryset, nunca sobre um unico objeto do model. Os métodos get, first, last e etc retornam apenas um objeto, e portanto, não podem mais ser manipulados pelos métodos de querysets.

Todos os parâmetros do método filter utiliza AND com    o padrão. Para fazer uma consulta OR, preciso importar o objeto Q.

Além de fazer consultas complexas, podemos referenciar campos, podendo até ser campos de outros modelos. Podemos fazer isso com o objeto F.
filter(id=F('author__id'))

Recipe.objects.values('id', 'title', 'author__username') Seleciona os campos que você quer. Isso evita uma consulta gulosa (que traz todos os campos e é o padrão) e faz uma consulta mais magra. Retorna um dicionário.

O método only() é similar ao values() selecionando os campos. Mas retorna um objeto de recipe em vez de um dicionário.
Recipe.objects.values('id', 'title'). Só deve ser usado quando você souber oque está fazendo, pois se o seu template (ou código) precisar de um campo que não foi especificado no only, ele irá fazer uma consulta para cada um dos objetos para buscar o campo que falta, e isso é péssimo pro desempenho.
O método defer() é o contrário do only. Em vez de selecionar apenas (only) uns campos específicos para a consulta, eu seleciono todos mas excluo os campos especificados. Acontece o mesmo problema do only() quando se é usado um campo que não foi especificado.
Já no método values() quando um campo não é especificado e é usado, o método values não busca esse campo.

recipes = Recipe.objects.values('id', 'title')[:5]
number_of_recipes = recipes.aggregate(number=Count('id'))
No .aggregate posso usar funções de agregação do SQL como Count, Min, Max e etc. Nesse caso o count será 5, pois estou contando todas as receitas da queryset recipes.

Método annotate() cria um novo campo e valore na queryset.
Recipe.objects.all().annotate(author_full_name=...)
Estou criando um campo chamado author_full_name que antes não existia.

A função Concat() serve para fazer concatenações de valores. A função Value() cria valores passíveis de manipulação.

Os managers em django são o gateway entre o código e a base de dados, converte o código para querys na base de dados.
É possível sobreescrever o manager ou criar seu próprio manager, porque o Django é feito em Python, e o Python nos fornece essa funcionalidade.
Recipes.objects.all() -> objects é o manager.

class RecipeManager(models.Manager):
    ...
Estou criando meu próprio manager. Depois é só instanciar.
class Recipe(models.Model):
    objects = RecipeManager() # posso até trocar o nome do meu manager.

o framework padrão do django contenttypes nos permite fazer relações genéricas entre apps, para que o app possa ser transportado para outro projeto ou até reutilizado em outro app de maneira genérica, sem dependencias.
Criamos um app de tags que poderá ser transportado para qualquer lugar da aplicação (autores, receitas, categorias, ele não vai depender de nada da aplicação), ou até para outro projeto.